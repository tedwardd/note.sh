#!/usr/bin/env python

import click
import coloredlogs
import git
import json
import logging
import os
import shutil
import sys

logger = logging.getLogger(__name__)
coloredlogs.install(
        fmt='%(levelname)s, %(message)s',
        logger=logger
)


def get_git_root(path):
    """
    Get the root of the git repo
    """
    git_repo = git.Repo(path, search_parent_directories=True)
    git_root = git_repo.git.rev_parse("--show-toplevel")
    return git_root

def read_template(path):
    """
    Return the contents of a template file
    """
    if not os.path.isfile(path):
        logger.error(f"{path} does not exist")
        sys.exit(1)

    with open(path, "r") as f:
        try:
            template = json.load(f)
        except json.JSONDecodeError:
            logger.error(f"{path} is not a json file. Can only read json templates")
            sys.exit(1)

    return template

def install(src, path, file):
    """
    Install a give file in to a given path
    """
    if not os.path.isdir(path):
        click.confirm(f"{path} does not exist. Should we create it?", abort=True)
        try:
            os.mkdir(path)
        except Exception as e:
            logger.error(f"Encountered error while creating {path}: {e}")
            sys.exit(1)

    if path not in os.getenv('PATH').split(':'):
        try:
            click.confirm(f"{path} is not in your $PATH. Do you still want to continue anyway?", abort=True)
        except click.exceptions.Abort:
            logger.info("You have chosen to abort. Exiting setup...")
            sys.exit(0)

    if not os.path.isfile(os.path.join(path, file)):
        shutil.copyfile(src, os.path.join(path, file))

    return os.path.join(path, file)



def main():
    """
    Generate an iTerm2 profile based on user input
    """
    try:
        gr = get_git_root(os.getcwd())
    except git.InvalidGitRepositoryError:
        logger.error("Can't run this without being in a git repo.")
        sys.exit(1)

    template_dir = os.path.join(gr, "templates")
    script_dir = os.path.join(gr, "scripts")

    install_path = click.prompt("Where is `takenote` located?", default=gr)
    if not os.path.isfile(os.path.join(install_path, 'takenote')):
        click.confirm(f"{os.path.join(install_path, 'takenote')} does not exist, should we install it there?", abort=True)
    cmd_location = install(os.path.join(gr, 'takenote'), install_path, 'takenote')

    notes_path = click.prompt("Where do you save your notes?", default=os.path.join(os.path.expanduser("~"), "notes"))
    if not os.path.isdir(notes_path):
        click.confirm(f"{notes_path} does not exist. Create it?", abort=True)

    user_shell = os.getenv('SHELL')

    profile_json = read_template(os.path.join(template_dir, "profile.json"))
    profile_json["Working Directory"] = notes_path
    profile_json["Command"] = f"{user_shell} -c {cmd_location}"

    with open(os.path.join(gr, "profile.json"), 'w') as f:
        json.dump(profile_json, f)


if __name__ == "__main__":
    main()
